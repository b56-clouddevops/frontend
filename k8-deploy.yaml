apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: 355449129696.dkr.ecr.us-east-1.amazonaws.com/frontend:v003
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"


--- 
# Creating ClusterIP Service ( this is the default type ) 
apiVersion: v1
kind: Service
metadata:
  name: frontend-svc
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080 

--- 
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa 
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75

--- 
# Creating Ingress To Expose this service

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend-ingress
spec:
  ingressClassName: nginx
  rules:
  - host: console.b56-roboshop.online
    http:
      paths:
      - path: "/"
        pathType: Prefix
        backend:
          service:
            name: frontend-svc
            port:
              number: 80


# You can call the service by it's name like frontend-svc if it's available in the default nameSpace 

# What if the service is available on x nameSpace ?
# How service available in x nameSpace can talk to other service in y nameSpace ?
# in this case, you need to use FQDN 

# How it looks like  ?   serviceName.nameSpace.svc.cluster.local
                          # x-svc.x.svc.cluster.local 
                          # y-svc.y.svc.cluster.local